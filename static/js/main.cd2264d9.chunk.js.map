{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/comments.js","App.jsx","api/users.js","index.js"],"names":["BASE_URL","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPosts","PostsList","userId","setPostId","setPostOpen","useState","posts","setPosts","selectedPostId","setSelectedPostId","useEffect","filter","post","getUserPosts","className","map","key","id","name","body","type","onClick","NewCommentForm","React","memo","postID","addNewComment","initialValues","email","postId","newComment","setNewComment","useForm","register","handleSubmit","errors","formState","reset","handleChangeInput","e","target","value","prev","onSubmit","method","placeholder","required","onChange","pattern","PostDetails","setPost","comments","setComments","commentHidden","setCommentHidden","getPostDetails","getPostComments","removeCommentHandler","commentId","removePostComment","comment","useCallback","newCommentId","Math","max","item","Number","headers","JSON","stringify","addPostComment","title","length","App","users","setUsers","selectedUserId","setUserId","postOpened","elem","i","self","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd2264d9.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(url, options) {\n  return fetch(url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n","import { BASE_URL, request } from './api';\n\nexport function getPosts() {\n  return request(`${BASE_URL}/posts`);\n}\n\nexport function getUserPosts(userId) {\n  return getPosts()\n    .then(posts => posts.filter(post => (\n      post.userId === userId\n    )));\n}\n\nexport function getPostDetails(postId) {\n  return request(`${BASE_URL}/posts/${postId}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  userId,\n  setPostId,\n  setPostOpen,\n}) => {\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState('');\n\n  useEffect(() => {\n    if (!userId) {\n      getPosts()\n        .then(setPosts);\n    } else {\n      getUserPosts(userId)\n        .then(setPosts);\n    }\n  }, [userId]);\n\n  const openPost = (id) => {\n    setSelectedPostId(id);\n    setPostId(id);\n    setPostOpen(id);\n  };\n\n  const closePost = () => {\n    setSelectedPostId('');\n    setPostOpen(false);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                [User\n                {post.name}\n                ]:\n                {' '}\n              </b>\n              {post.body}\n            </div>\n\n            {selectedPostId !== post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => openPost(post.id)}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button button--active\"\n                onClick={() => closePost()}\n              >\n                Close\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n  setPostOpen: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './NewCommentForm.scss';\nimport { useForm } from 'react-hook-form';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = React.memo(({\n  postID,\n  addNewComment,\n}) => {\n  const initialValues = {\n    name: '',\n    email: '',\n    body: '',\n    postId: postID,\n  };\n\n  const [newComment, setNewComment] = useState(initialValues);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({ initialValues });\n\n  useEffect(() => {\n    reset({ errors: false });\n  }, [postID]);\n\n  const onSubmit = () => {\n    addNewComment(newComment);\n    setNewComment(initialValues);\n  };\n\n  const handleChangeInput = (e) => {\n    const { name, value } = e.target;\n\n    setNewComment(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit(onSubmit)}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          {...register('name', { required: true })}\n          onChange={handleChangeInput}\n        />\n        {errors.name\n          && <p className=\"NewCommentForm__error\">Name is required.</p>\n        }\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          {...register('email', { required: true }, { pattern: /\\S+@\\S+/ })}\n          onChange={handleChangeInput}\n        />\n        {errors.email\n          && <p className=\"NewCommentForm__error\">Email is required and must be valid.</p>\n        }\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comments here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          {...register('body', { required: true })}\n          onChange={handleChangeInput}\n        />\n        {errors.body\n          && <p className=\"NewCommentForm__error\">Comment body text is required.</p>\n        }\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n\nNewCommentForm.propTypes = {\n  postID: PropTypes.number.isRequired,\n  addNewComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, removePostComment, addPostComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState([]);\n  const [comments, setComments] = useState(null);\n  const [commentHidden, setCommentHidden] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(setPost);\n    getPostComments(postId)\n      .then(setComments);\n  }, [postId]);\n\n  const toggleDisplayComment = () => {\n    setCommentHidden(!commentHidden);\n  };\n\n  const removeCommentHandler = (commentId) => {\n    removePostComment(commentId);\n\n    setComments(prev => (\n      prev.filter(comment => (\n        comment.id !== commentId\n      ))\n    ));\n  };\n\n  const addNewComment = useCallback((comment) => {\n    const newCommentId = Math.max(\n      ...comments.map(item => Number(item.id)),\n    ) + 1;\n    const newComment = {\n      ...comment,\n      id: newCommentId,\n    };\n\n    addPostComment(newComment);\n    setComments(prev => [\n      ...prev,\n      newComment,\n    ]);\n  }, [comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>{post.title}</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      {comments && (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => toggleDisplayComment()}\n          >\n            {commentHidden ? 'Show' : 'Hide'}\n            {' '}\n            {comments.length}\n            {' '}\n            comments\n          </button>\n\n          {!commentHidden && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeCommentHandler(comment.id)}\n                  >\n                    &#10006;\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postID={postId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL, request } from './api';\n\nexport function getPostComments(postId) {\n  return request(`${BASE_URL}/comments?postId=${postId}`);\n}\n\nexport function removePostComment(postId) {\n  return request(`${BASE_URL}/comments/${postId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function addPostComment(comment) {\n  return request(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [users, setUsers] = useState(null);\n  const [selectedUserId, setUserId] = useState('');\n  const [postId, setPostId] = useState('');\n  const [postOpened, setPostOpen] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(data => setUsers(data));\n  }, []);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n\n    setUserId(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        {users ? (\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              name=\"user\"\n              className=\"App__user-selector\"\n              value={selectedUserId}\n              onChange={handleChange}\n            >\n              <option value=\"\">\n                Choose a user\n              </option>\n              {users.map(user => (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n        ) : (\n          <div className=\"App__loading-message\">Loading data...</div>\n        )}\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={+selectedUserId}\n            setPostId={setPostId}\n            setPostOpen={setPostOpen}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postOpened && (\n            <PostDetails postId={Number(postId)} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL, request } from './api';\n\nexport function getUsers() {\n  return request(`${BASE_URL}/users`)\n    .then(users => users.filter((elem, i, self) => i === 0 || elem.name !== self[i - 1].name));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}