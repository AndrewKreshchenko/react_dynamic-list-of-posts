{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/comments.js","App.jsx","api/users.js","index.js"],"names":["BASE_URL","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPosts","PostsList","userId","postId","setPostId","useState","posts","setPosts","useEffect","filter","post","getUserPosts","closePost","className","map","key","id","name","body","type","onClick","NewCommentForm","React","memo","postID","addNewComment","initialValues","email","newComment","setNewComment","useForm","register","handleSubmit","errors","formState","reset","handleChangeInput","e","target","value","prev","onSubmit","method","placeholder","required","onChange","message","pattern","minLength","PostDetails","setPost","comments","setComments","commentHidden","setCommentHidden","getPostDetails","getPostComments","removeCommentHandler","commentId","removePostComment","comment","useCallback","date","Date","now","toString","Number","substr","length","headers","JSON","stringify","addPostComment","title","App","users","setUsers","selectedUserId","setUserId","elem","i","self","user","ReactDOM","render","document","getElementById"],"mappings":"2UAAaA,G,YAAW,kCAEjB,SAASC,EAAQC,EAAKC,GAC3B,OAAOC,MAAMF,EAAKC,GACfE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,gBAAmBF,EAASG,OAA5B,aAAuCH,EAASI,aAGxD,OAAOJ,EAASK,UAEjBN,MAAK,SAAAO,GAAM,OAAIA,EAAOC,QCTpB,SAASC,IACd,OAAOb,EAAQ,GAAD,OAAID,EAAJ,W,UCEHe,EAAY,SAAC,GAInB,IAHLC,EAGI,EAHJA,OACAC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACHN,EDPF,SAAsBA,GAC3B,OAAOF,IACJT,MAAK,SAAAe,GAAK,OAAIA,EAAMG,QAAO,SAAAC,GAAI,OAC9BA,EAAKR,SAAWA,QCQhBS,CAAaT,GACVX,KAAKgB,GAJRP,IACGT,KAAKgB,KAKT,CAACL,IAEJ,IAIMU,EAAY,WAChBR,EAAU,KAGZ,OACE,yBAAKS,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXP,EAAMQ,KAAI,SAAAJ,GAAI,OACb,wBAAIG,UAAU,kBAAkBE,IAAKL,EAAKM,IACxC,6BACE,mCAEGN,EAAKO,KAFR,KAIG,KAEFP,EAAKQ,MAGPf,IAAWO,EAAKM,GACf,4BACEG,KAAK,SACLN,UAAU,2BACVO,QAAS,kBA7BLJ,EA6BoBN,EAAKM,QA5BzCZ,EAAUY,GADK,IAACA,IA0BN,QAQA,4BACEG,KAAK,SACLN,UAAU,0CACVO,QAASR,GAHX,gB,qCCnDDS,EAAiBC,IAAMC,MAAK,YAGlC,IAFLC,EAEI,EAFJA,OACAC,EACI,EADJA,cAEMC,EAAgB,CACpBT,KAAM,GACNU,MAAO,GACPT,KAAM,GACNf,OAAQqB,GAGV,EAAoCnB,mBAASqB,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAEA,EAKIC,YAAQ,CAAEJ,kBAJZK,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAGF3B,qBAAU,WACR2B,EAAM,CAAEF,QAAQ,IAChBJ,EAAcH,KACb,CAACF,IAEJ,IAKMY,EAAoB,SAACC,GACzB,MAAwBA,EAAEC,OAAlBrB,EAAR,EAAQA,KAAMsB,EAAd,EAAcA,MAEdV,GAAc,SAAAW,GAAI,kCACbA,GADa,kBAEfvB,EAAOsB,QAIZ,OACE,0BACE1B,UAAU,iBACV4B,SAAUT,GAjBG,WACfP,EAAcG,GACdC,EAAcH,MAgBZgB,OAAO,QAEP,yBAAK7B,UAAU,cACb,yCACEM,KAAK,OACLF,KAAK,OACL0B,YAAY,YACZ9B,UAAU,wBACV0B,MAAOX,EAAWX,MACdc,EAAS,OAAQ,CAAEa,SAAU,sBANnC,CAOEC,SAAUT,KAEXH,EAAOhB,MACH,uBAAGJ,UAAU,yBAAyBoB,EAAOhB,KAAK6B,UAIzD,yBAAKjC,UAAU,cACb,yCACEM,KAAK,OACLF,KAAK,QACL0B,YAAY,aACZ9B,UAAU,wBACV0B,MAAOX,EAAWD,OACdI,EAAS,QAAS,CACpBa,SAAU,qBACVG,QAAS,CACPR,MAAO,eACPO,QAAS,gDAVf,CAaED,SAAUT,KAEXH,EAAON,OACH,uBAAGd,UAAU,yBAAyBoB,EAAON,MAAMmB,UAI1D,yBAAKjC,UAAU,cACb,4CACEI,KAAK,OACL0B,YAAY,qBACZ9B,UAAU,wBACV0B,MAAOX,EAAWV,MACda,EAAS,OAAQ,CACnBa,SAAU,4BACVI,UAAW,CACTT,MAAO,EACPO,QAAS,wCAEXC,QAAS,CACPR,MAAO,aACPO,QAAS,iDAbf,CAgBED,SAAUT,KAEXH,EAAOf,MACH,uBAAGL,UAAU,yBAAyBoB,EAAOf,KAAK4B,UAIzD,4BACE3B,KAAK,SACLN,UAAU,wCAFZ,qB,UCvGOoC,EAAc,SAAC,GAAgB,IAAd9C,EAAa,EAAbA,OAC5B,EAAwBE,mBAAS,IAAjC,mBAAOK,EAAP,KAAawC,EAAb,KACA,EAAgC7C,mBAAS,MAAzC,mBAAO8C,EAAP,KAAiBC,EAAjB,KACA,EAA0C/C,oBAAS,GAAnD,mBAAOgD,EAAP,KAAsBC,EAAtB,KAEA9C,qBAAU,YHCL,SAAwBL,GAC7B,OAAOhB,EAAQ,GAAD,OAAID,EAAJ,kBAAsBiB,KGDlCoD,CAAepD,GACZZ,KAAK2D,GCZL,SAAyB/C,GAC9B,OAAOhB,EAAQ,GAAD,OAAID,EAAJ,4BAAgCiB,IDY5CqD,CAAgBrD,GACbZ,KAAK6D,KACP,CAACjD,IAEJ,IAIMsD,EAAuB,SAACC,ICjBzB,SAA2BvD,GACzBhB,EAAQ,GAAD,OAAID,EAAJ,qBAAyBiB,GAAU,CAC/CuC,OAAQ,WDgBRiB,CAAkBD,GAElBN,GAAY,SAAAZ,GAAI,OACdA,EAAK/B,QAAO,SAAAmD,GAAO,OACjBA,EAAQ5C,KAAO0C,SAKfjC,EAAgBoC,uBAAY,SAACD,GACjC,IAAME,EAAOC,KAAKC,MAAMC,WAClBrC,EAAU,2BACXgC,GADW,IAEd5C,GAAIkD,OAAOJ,EAAKK,OAAOL,EAAKM,OAAS,OCzBpC,SAAwBR,GACtBzE,EAAQ,GAAD,OAAID,EAAJ,aAAyB,CACrCwD,OAAQ,OACR2B,QAAS,CACP,eAAgB,mCAElBnD,KAAMoD,KAAKC,UAAUX,KDsBrBY,CAAe5C,GACfwB,GAAY,SAAAZ,GAAI,4BACXA,GADW,CAEdZ,SAED,CAACuB,IAEJ,OACE,yBAAKtC,UAAU,eACb,4BAAKH,EAAK+D,OAEV,6BAAS5D,UAAU,qBACjB,2BAAIH,EAAKQ,OAGViC,GACC,6BAAStC,UAAU,yBACjB,4BACEM,KAAK,SACLN,UAAU,SACVO,QAzCmB,WAC3BkC,GAAkBD,KA0CTA,EAAgB,OAAS,OACzB,IACAF,EAASiB,OACT,IARH,aAYEf,GACA,wBAAIxC,UAAU,qBACXsC,EAASrC,KAAI,SAAA8C,GAAO,OACnB,wBAAI/C,UAAU,yBAAyBE,IAAK6C,EAAQ5C,IAClD,4BACEG,KAAK,SACLN,UAAU,oCACVO,QAAS,kBAAMqC,EAAqBG,EAAQ5C,MAH9C,UAOA,2BAAI4C,EAAQ1C,YAQxB,iCACE,yBAAKL,UAAU,6BACb,kBAAC,EAAD,CACEW,OAAQrB,EACRsB,cAAeA,QErF3B,IA+DeiD,EA/DH,WACV,MAA0BrE,mBAAS,MAAnC,mBAAOsE,EAAP,KAAcC,EAAd,KACA,EAAoCvE,mBAAS,IAA7C,mBAAOwE,EAAP,KAAuBC,EAAvB,KACA,EAA4BzE,mBAAS,IAArC,mBAAOF,EAAP,KAAeC,EAAf,KAEAI,qBAAU,WCTHrB,EAAQ,GAAD,OAAID,EAAJ,WACXK,MAAK,SAAAoF,GAAK,OAAIA,EAAMlE,QAAO,SAACsE,EAAMC,EAAGC,GAAV,OAAyB,IAAND,GAAWD,EAAK9D,OAASgE,EAAKD,EAAI,GAAG/D,WDUjF1B,MAAK,SAAAQ,GAAI,OAAI6E,EAAS7E,QACxB,IAQH,OACE,yBAAKc,UAAU,OACb,4BAAQA,UAAU,eACf8D,EACC,qDAGE,4BACE1D,KAAK,OACLJ,UAAU,qBACV0B,MAAOsC,EACPhC,SAjBS,SAACR,GACpB,IAAQE,EAAUF,EAAEC,OAAZC,MAERuC,EAAUvC,KAgBA,4BAAQA,MAAM,IAAd,iBAGCoC,EAAM7D,KAAI,SAAAoE,GAAI,OACb,4BAAQ3C,MAAO2C,EAAKlE,GAAID,IAAKmE,EAAKlE,IAC/BkE,EAAKjE,WAMd,yBAAKJ,UAAU,wBAAf,oBAIJ,0BAAMA,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEX,QAAS2E,EACT1E,OAAQ+D,OAAO/D,GACfC,UAAWA,KAIf,yBAAKS,UAAU,gBACM,kBAAXV,GACN,kBAAC,EAAD,CAAaA,OAAQ+D,OAAO/D,SEzDxCgF,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.03987597.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(url, options) {\n  return fetch(url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(result => result.data);\n}\n","import { BASE_URL, request } from './api';\n\nexport function getPosts() {\n  return request(`${BASE_URL}/posts`);\n}\n\nexport function getUserPosts(userId) {\n  return getPosts()\n    .then(posts => posts.filter(post => (\n      post.userId === userId\n    )));\n}\n\nexport function getPostDetails(postId) {\n  return request(`${BASE_URL}/posts/${postId}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  userId,\n  postId,\n  setPostId,\n}) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (!userId) {\n      getPosts()\n        .then(setPosts);\n    } else {\n      getUserPosts(userId)\n        .then(setPosts);\n    }\n  }, [userId]);\n\n  const openPost = (id) => {\n    setPostId(id);\n  };\n\n  const closePost = () => {\n    setPostId('');\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                [User\n                {post.name}\n                ]:\n                {' '}\n              </b>\n              {post.body}\n            </div>\n\n            {postId !== post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => openPost(post.id)}\n              >\n                Open\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button button--active\"\n                onClick={closePost}\n              >\n                Close\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  postId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './NewCommentForm.scss';\nimport { useForm } from 'react-hook-form';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = React.memo(({\n  postID,\n  addNewComment,\n}) => {\n  const initialValues = {\n    name: '',\n    email: '',\n    body: '',\n    postId: postID,\n  };\n\n  const [newComment, setNewComment] = useState(initialValues);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({ initialValues });\n\n  useEffect(() => {\n    reset({ errors: false });\n    setNewComment(initialValues);\n  }, [postID]);\n\n  const onSubmit = () => {\n    addNewComment(newComment);\n    setNewComment(initialValues);\n  };\n\n  const handleChangeInput = (e) => {\n    const { name, value } = e.target;\n\n    setNewComment(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit(onSubmit)}\n      method=\"POST\"\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newComment.name}\n          {...register('name', { required: 'Name is required.' })}\n          onChange={handleChangeInput}\n        />\n        {errors.name\n          && <p className=\"NewCommentForm__error\">{errors.name.message}</p>\n        }\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newComment.email}\n          {...register('email', {\n            required: 'Email is required.',\n            pattern: {\n              value: /\\S+@\\S+\\.\\S+/,\n              message: 'Entered email does not match email format.',\n            },\n          })}\n          onChange={handleChangeInput}\n        />\n        {errors.email\n          && <p className=\"NewCommentForm__error\">{errors.email.message}</p>\n        }\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comments here\"\n          className=\"NewCommentForm__input\"\n          value={newComment.body}\n          {...register('body', {\n            required: 'Message text is required.',\n            minLength: {\n              value: 5,\n              message: 'Minimal length of message text is 5.',\n            },\n            pattern: {\n              value: /^$|.*\\S+.*/,\n              message: 'Message should\\'t be made up of whitespaces.',\n            },\n          })}\n          onChange={handleChangeInput}\n        />\n        {errors.body\n          && <p className=\"NewCommentForm__error\">{errors.body.message}</p>\n        }\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n\nNewCommentForm.propTypes = {\n  postID: PropTypes.number.isRequired,\n  addNewComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, removePostComment, addPostComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState([]);\n  const [comments, setComments] = useState(null);\n  const [commentHidden, setCommentHidden] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(setPost);\n    getPostComments(postId)\n      .then(setComments);\n  }, [postId]);\n\n  const toggleDisplayComment = () => {\n    setCommentHidden(!commentHidden);\n  };\n\n  const removeCommentHandler = (commentId) => {\n    removePostComment(commentId);\n\n    setComments(prev => (\n      prev.filter(comment => (\n        comment.id !== commentId\n      ))\n    ));\n  };\n\n  const addNewComment = useCallback((comment) => {\n    const date = Date.now().toString();\n    const newComment = {\n      ...comment,\n      id: Number(date.substr(date.length - 5)),\n    };\n\n    addPostComment(newComment);\n    setComments(prev => [\n      ...prev,\n      newComment,\n    ]);\n  }, [comments]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>{post.title}</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      {comments && (\n        <section className=\"PostDetails__comments\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={toggleDisplayComment}\n          >\n            {commentHidden ? 'Show' : 'Hide'}\n            {' '}\n            {comments.length}\n            {' '}\n            comments\n          </button>\n\n          {!commentHidden && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeCommentHandler(comment.id)}\n                  >\n                    &#10006;\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postID={postId}\n            addNewComment={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL, request } from './api';\n\nexport function getPostComments(postId) {\n  return request(`${BASE_URL}/comments?postId=${postId}`);\n}\n\nexport function removePostComment(postId) {\n  return request(`${BASE_URL}/comments/${postId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function addPostComment(comment) {\n  return request(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [users, setUsers] = useState(null);\n  const [selectedUserId, setUserId] = useState('');\n  const [postId, setPostId] = useState('');\n\n  useEffect(() => {\n    getUsers()\n      .then(data => setUsers(data));\n  }, []);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n\n    setUserId(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        {users ? (\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              name=\"user\"\n              className=\"App__user-selector\"\n              value={selectedUserId}\n              onChange={handleChange}\n            >\n              <option value=\"\">\n                Choose a user\n              </option>\n              {users.map(user => (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n        ) : (\n          <div className=\"App__loading-message\">Loading data...</div>\n        )}\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={+selectedUserId}\n            postId={Number(postId)}\n            setPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {typeof postId === 'number' && (\n            <PostDetails postId={Number(postId)} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL, request } from './api';\n\nexport function getUsers() {\n  return request(`${BASE_URL}/users`)\n    .then(users => users.filter((elem, i, self) => i === 0 || elem.name !== self[i - 1].name));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}